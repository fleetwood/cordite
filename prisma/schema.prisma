generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("NEXT_PUBLIC_DATABASE_URL")
  directUrl = env("NEXT_PUBLIC_DIRECT_URL")
  // If you want to use Prisma Migrate, you will need to manually create a shadow database
  // https://neon.tech/docs/guides/prisma-migrate#configure-a-shadow-database-for-prisma-migrate
  // make sure to append ?connect_timeout=10 to the connection string
  // shadowDatabaseUrl = env(“SHADOW_DATABASE_URL”)
}

// datasource db {
//   provider = "sqlite"
//   url      = "file:./db/cordite.db"
// }

//////////////
// STAT STUFF

// PHY AND FIN
// WIT AND INT
// CHA  f 
model Stat {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  visible   Boolean  @default(true)

  name        String
  icon        String
  description String
  cast        Boolean? @default(false)

  skills    Skill[]    @relation("skill_stats")
  charStats CharStat[] @relation("character_stats")
}

model Skill {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  visible   Boolean  @default(true)
  level     Int      @default(0)

  name        String
  icon        String
  description String

  statId String
  stat   Stat   @relation("skill_stats", fields: [statId], references: [id])

  charSkills CharSkill[] @relation("character_skills")
}

model CharClass {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  visible   Boolean  @default(true)

  name        String
  icon        String?
  banner      String?
  avatar      String?
  description String

  charClassId String?
  parentClass CharClass?  @relation("subclasses", fields: [charClassId], references: [id])
  subClasses  CharClass[] @relation("subclasses")

  abilities  Ability[]   @relation("charClass_abilities")
  characters Character[] @relation("character_class")
}

model Ability {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  visible   Boolean  @default(true)
  level     Int      @default(0)

  name        String
  icon        String
  description String
  requirement Int    @default(0)

  charClassId String
  charClass   CharClass @relation("charClass_abilities", fields: [charClassId], references: [id])

  charAbilities CharAbility[] @relation("character_abilities")
}

model Requirements {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  visible   Boolean  @default(true)
}

model RequireGroup {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  visible   Boolean  @default(true)
}

/////////////////////////
// CHAR STUFF
model Character {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  visible   Boolean  @default(true)

  ownerId String
  owner   User   @relation("user_characters", fields: [ownerId], references: [id])

  name   String
  avatar String?
  story  String?
  level  Int     @default(1)

  charClassId String
  charClass   CharClass @relation("character_class", fields: [charClassId], references: [id])

  stats     CharStat[]    @relation("char_stats")
  skills    CharSkill[]   @relation("char_skills")
  abilities CharAbility[] @relation("char_abilities")
}

model CharStat {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  visible   Boolean  @default(true)

  level Int @default(0)

  characterId String
  character   Character @relation("char_stats", fields: [characterId], references: [id])

  statId String
  stat   Stat   @relation("character_stats", fields: [statId], references: [id])
}

model CharSkill {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  visible   Boolean  @default(true)

  level Int @default(0)

  characterId String
  character   Character @relation("char_skills", fields: [characterId], references: [id])

  skillId String
  skill   Skill  @relation("character_skills", fields: [skillId], references: [id])
}

model CharAbility {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  visible   Boolean  @default(true)

  level Int @default(0)

  characterId String
  character   Character @relation("char_abilities", fields: [characterId], references: [id])

  abilityId String
  ability   Ability @relation("character_abilities", fields: [abilityId], references: [id])
}

model Melee {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  visible   Boolean  @default(true)

  name   String
  image  String?
  damage String
  weight String
}

model Ranged {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  visible   Boolean  @default(true)

  name   String
  image  String?
  damage String
  weight String

  rof       Int
  penalty   Int
  capacity  Int
  medRange  Int
  longRange Int
  ammo      String
}

/////////////////////////
// USER STUFF
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  name          String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  slug          String?   @unique
  visible       Boolean?  @default(true)

  role       Role        @default(PLAYER)
  characters Character[] @relation("user_characters")

  accounts Account[]
  sessions Session[]

  @@index([id, name, email])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  PLAYER
  DM
  ADMIN
}
